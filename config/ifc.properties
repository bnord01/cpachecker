log.consoleLevel = INFO

analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.ifc.InformationFlowCPA

InformationFlowCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

limits.time.cpu = 900s

# No support for multi edges yet
cfa.useMultiEdges = false

# --------------------------------------------------------------
# Do a counterexample check using CPAchecker with value analysis
# --------------------------------------------------------------

# Check counterexamples.
analysis.checkCounterexamples = true

# use CPAchecker to analyse counterexamples
counterexample.checker = CPACHECKER
counterexample.checker.config = cex-checks/valueAnalysis-as-cex-check.properties

cegar.refiner = cpa.predicate.PredicateRefiner

# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true


cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

[cpa.predicate]
# Setting the option to make memory allocations always return correct addresses
memoryAllocationsAlwaysSucceed = true

# New heuristic for cillified files: pre-populate small structures with all their fields
maxPreFilledAllocationSize = 0

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true

